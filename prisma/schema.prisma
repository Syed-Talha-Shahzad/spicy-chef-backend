generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  SUPER_ADMIN
  CLIENT
}

enum orderType {
  DELIVERY
  COLLECTION
}

enum paymentType {
  CASH
  CARD
  STRIPE
}

enum paymentStatus {
  PENDING
  PAID
}

enum orderStatus {
  PENDING
  ACCEPTED
  COMPLETED
  REJECTED
}

model branch {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  name      String
  address   String?
  startTime String?
  endTime   String?
  status    Boolean    @default(true)
  category  category[]
  modifier  modifier[]
  setting   setting[]
}

model user {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  firstName String?
  lastName  String?
  email     String    @unique
  password  String
  address   String?
  city      String?
  phoneNo   String?
  role      userRole  @default(CLIENT)
  status    Boolean   @default(true)
  order     order[]
}

model category {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  is_deal   Boolean   @default(false)
  branch_id String
  branch    branch    @relation(fields: [branch_id], references: [id], onDelete: Cascade)
  name      String
  image     String?
  status    Boolean   @default(true)
  item      item[]
}

model item {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
  name         String
  price        String
  image        String?
  discount     Int?
  description  String?
  category_id  String
  category     category       @relation(fields: [category_id], references: [id], onDelete: Cascade)
  status       Boolean        @default(true)
  variation    variation[]
  itemModifier itemModifier[]
  orderItem    orderItem[]
}

model variation {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime?   @updatedAt
  name      String
  price     String
  itemId    String
  item      item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  orderItem orderItem[]
}

model order {
  id            String        @id @default(uuid())
  userId        String?
  user          user?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
  orderId       String        @unique
  orderType     orderType
  paymentType   paymentType
  fullName      String
  phoneNo       String
  postCode      String?
  address       String
  deliveryFee   Decimal       @default(0) @db.Decimal(10, 2)
  serviceFee    Decimal       @default(0) @db.Decimal(10, 2)
  status        orderStatus   @default(PENDING)
  paymentStatus paymentStatus @default(PENDING)
  totalAmount   Decimal       @db.Decimal(10, 2)
  items         orderItem[]
}

model orderItem {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime?       @updatedAt
  orderId          String
  order            order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  quantity         Int
  itemId           String?
  item             item?           @relation(fields: [itemId], references: [id], onDelete: Cascade)
  modifierOptionId String?
  modifierOption   modifierOption? @relation(fields: [modifierOptionId], references: [id], onDelete: Cascade)
  variationId      String?
  variation        variation?      @relation(fields: [variationId], references: [id], onDelete: Cascade)
}

model modifier {
  id             String           @id @default(uuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
  name           String
  branch_id      String
  branch         branch           @relation(fields: [branch_id], references: [id], onDelete: Cascade)
  modifierOption modifierOption[]
  itemModifier   itemModifier[]
}

model modifierOption {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  name       String
  modifierId String
  modifier   modifier    @relation(fields: [modifierId], references: [id], onDelete: Cascade)
  price      Decimal     @db.Decimal(10, 2)
  status     Boolean     @default(true)
  orderItem  orderItem[]
}

model itemModifier {
  id         String @id @default(uuid())
  itemId     String
  modifierId String

  item     item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  modifier modifier @relation(fields: [modifierId], references: [id], onDelete: Cascade)

  @@unique([itemId, modifierId]) // prevent duplicates
}

model setting {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deliveryFee Decimal   @default(0) @db.Decimal(10, 2)
  serviceFee  Decimal   @default(0) @db.Decimal(10, 2)
  branch_id   String
  branch      branch    @relation(fields: [branch_id], references: [id], onDelete: Cascade)
}
